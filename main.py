__author__ = 'https://github.com/password123456/'
__version__ = '1.0.4-221219'

import os
import sys
import platform
import importlib
import time
import requests
import hashlib
import magic
import argparse
import uuid
import pefile
import netifaces

from datetime import datetime
from zipfile import ZipFile
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.x509.oid import NameOID
from asn1crypto import cms


importlib.reload(sys)


SCAN_EXTENTIONS = ['.exe', '.dll', '.sys', '.doc', '.docx', '.xls', '.xlsx', '.py', '.xml', '.cfg', '.txt', '.ppt', '.pptx', '.hwp']
EXCLUDE_DIRS = ['venv', 'venv2']


_today_ = datetime.today().strftime('%Y-%m-%d')
_ctime_ = datetime.today().strftime('%Y-%m-%d %H:%M:%S')

#_home_path_ = 'F:/code/pythonProject/malware_hash_scanner3'
_home_path_ = '%s' % os.getcwd()

_engine_zipfile_ = '%s/%s.zip' % (_home_path_, _today_)
_engine_extract_file_ = '%s/engine.db' % _home_path_

_scan_result_logs_ = '%s/output/%s-infected.log' % (_home_path_, _today_)


class Bcolors:
    Black = '\033[30m'
    Red = '\033[31m'
    Green = '\033[32m'
    Yellow = '\033[33m'
    Blue = '\033[34m'
    Magenta = '\033[35m'
    Cyan = '\033[36m'
    White = '\033[37m'
    Endc = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def download_engine():
    _url = 'https://bazaar.abuse.ch/export/txt/sha256/full/'
    _header = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) '
                             'Chrome/49.0.2623.112 Safari/537.36', 'Connection': 'keep-alive'}
    try:
        with open(_engine_zipfile_, 'wb') as f:
            #print('%s Download URL: %s %s' % (Bcolors.Green, url, Bcolors.Endc))
            r = requests.get(_url, headers=_header, stream=True)
            download_file_length = r.headers.get('Content-Length')
            print('%s Downloading: %s / %.2f MB %s'
                  % (Bcolors.Green, _engine_zipfile_, (float(download_file_length) / (1024.0 * 1024.0)), Bcolors.Endc))

            if download_file_length is None:
                f.write(r.content)
            else:
                dl = 0
                total_length = int(download_file_length)
                start = time.perf_counter()
                for data in r.iter_content(chunk_size=8092):
                    dl += len(data)
                    f.write(data)
                    done = int(100 * dl / total_length)
                    print('[%s%s] %s/%s (%s%%) - %.2f seconds '
                          % ('>' * done, ' ' * (100 - done), total_length, dl,
                             done, (time.perf_counter() - start)), end='\r')

        extract_gzip(_engine_zipfile_, _home_path_)

    except Exception as e:
        print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, download_engine.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
    finally:
        r.close()


def extract_gzip(_engine_zipfile_, _home_path_):
    with ZipFile(_engine_zipfile_, 'r') as zipObj:
        file_list = zipObj.infolist()
        for file in file_list:
            if file.filename[-1] == '/':
                continue
            file.filename = os.path.basename(file.filename)
            if file.filename.lower() == 'full_sha256.txt'.lower():
                zipObj.extract(file, _home_path_)
                _update_file = '%s/%s' % (_home_path_, file.filename)

                if os.path.isfile(_engine_extract_file_):
                    os.remove(_engine_extract_file_)

                try:
                    os.rename(_update_file, _engine_extract_file_)
                except OSError as e:
                    print('%s can not be renamed' % _update_file)
                    print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, extract_gzip.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
                    sys.exit(1)

    # Remove Engine zip
    try:
        os.remove(_engine_zipfile_)
    except OSError as e:
        print('%s can not be removed' % _engine_zipfile_)
        print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, extract_gzip.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
        sys.exit(1)

    # Check Downloaded File
    if os.path.isfile(_engine_extract_file_):
        f = open(_engine_extract_file_, 'rb')
        file_read = f.read()
        f.close()

        file_hash = hashlib.sha256(file_read).hexdigest()
        file_info = '===> Extracted Size: %.2f MB\n===> Hash(SHA-256) : %s\n' \
                    % (int(os.path.getsize(_engine_extract_file_)) / (1024.0 * 1024.0), file_hash)

        print('\n\n%s===> Update Success: %s %s' % (Bcolors.Green, _engine_extract_file_, Bcolors.Endc))
        print('%s%s%s' % (Bcolors.Green, file_info, Bcolors.Endc))
    else:
        print('%s[-] %s not found. %s' % (Bcolors.Yellow, _engine_extract_file_, Bcolors.Endc))
        sys.exit(1)


def raw_count(filename):
    n = 0
    with open(filename) as f:
        for line in f:
            if not line.startswith('#'):
                n = n + 1
    return n


def get_engine_last_udated_date(filename):
    with open(filename) as f:
        for line in f:
            if 'Last updated' in line:
                line = line.replace('#', '')
                line = line.lstrip().strip('\n')
                line = line.split(' ')
                line = line[2:5]
                line = ' '.join(line)
                #print(line)
                break
    return line


def hash_exists_in_db(check_hash):
    _mode = 'r'
    _n = 0
    with open(_engine_extract_file_, _mode) as database:
        for line in database:
            _n = _n + 1
            if len(line.strip()) != 0:
                if not line.startswith('#'):
                    if str(check_hash) in str(line):
                        return True
    return False


def scan_result_logs(_contents):
    _make_output_dir = '%s/output' % _home_path_
    _mode = 'w'

    if os.path.exists(_make_output_dir):
        if os.path.exists(_scan_result_logs_):
            _mode = 'a'
    else:
        _mode = 'w'
        os.makedirs(_make_output_dir)

    with open(_scan_result_logs_, _mode) as fa:
        fa.write('%s' % _contents)


def make_hash(_f_file_name):
    _file_hash = ''
    if os.path.isfile(_f_file_name):
        f = open(_f_file_name, 'rb')
        filename_read = f.read()
        _file_hash = hashlib.sha256(filename_read).hexdigest()
        f.close()
    return _file_hash


def check_file_extension(_file_name):
    #print(file_name)
    if _file_name.endswith(tuple(SCAN_EXTENTIONS)):
        return True
    else:
        return False


def check_file_size(_f_file_name):
    # 10MB = '10485760'
    _limit = 10485760

    f = os.stat(_f_file_name).st_size
    if f <= _limit:
        return True
    else:
        return False


def get_create_date(_f_file_name):
    if platform.system() == 'Windows':
        _result = os.path.getctime(_f_file_name)
    else:
        _result = os.path.getmtime(_f_file_name)
    return datetime.fromtimestamp(_result).strftime('%Y-%m-%d %H:%M:%S')


def get_modify_date(_f_file_name):
    _result = os.path.getmtime(_f_file_name)
    return datetime.fromtimestamp(_result).strftime('%Y-%m-%d %H:%M:%S')


def get_file_type(_file_name):
    return magic.from_buffer(open(_file_name, 'rb').read(2048))


def get_hostname():
    return platform.node()


def get_osver():
    return platform.system()


def get_ip_address():
    gateways = netifaces.gateways()
    default_gateway = gateways['default'][netifaces.AF_INET]
    gateway_ip, interface = default_gateway[0], default_gateway[1]
    iface = netifaces.ifaddresses(interface)
    local_ip = iface[netifaces.AF_INET][0]['addr']
    return local_ip


def create_job_id():
    return uuid.uuid4()


def extract_digital_signature(_file_name, _f_file_name):
    _result = ''

    pe = pefile.PE(_f_file_name)
    if hex(pe.DOS_HEADER.e_magic) == '0x5a4d':
        address = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_SECURITY"]].VirtualAddress
        size = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_SECURITY"]].Size

        if address == 0:
            _result = '** No Digital-Signed File **'
        else:
            with open(_f_file_name, 'rb') as fh:
                fh.seek(address)
                thesig = fh.read(size)
            signature = cms.ContentInfo.load(thesig[8:])

            i = 0
            for cert in signature['content']['certificates']:
                i = i + 1
                _export_certificate = '%s/output/%s_%s.der' % (_home_path_, _file_name, i)
                with open(_export_certificate, 'wb+') as f:
                    f.write(cert.dump())

                x509_pem_cert = x509.load_der_x509_certificate(cert.dump(), default_backend())
                _subject = x509_pem_cert.issuer.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value
                if 'root' not in _subject.lower():
                    _contents = '%s_%s_valid(%s-%s)|' % (x509_pem_cert.subject.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value,
                                                         x509_pem_cert.issuer.get_attributes_for_oid(NameOID.ORGANIZATION_NAME)[0].value,
                                                         x509_pem_cert.not_valid_before, x509_pem_cert.not_valid_after)
                    _result += _contents
    pe.close()
    return _result


def check_engine():

    if os.path.exists(_engine_extract_file_):
        create_time = os.stat(_engine_extract_file_).st_mtime

        _engine_file_date = datetime.fromtimestamp(create_time).strftime('%Y%m%d')
        _today_num = datetime.today().strftime('%Y%m%d')

        if not(int(_engine_file_date) == int(_today_num)):
            _get_download = False
        else:
            _get_download = True

        if not _get_download:
            print('%s- Updating Engine Signatures.%s' % (Bcolors.Yellow, Bcolors.Endc))
            download_engine()
        else:
            print('%s- Up2date Engine  : ^_^V %s' % (Bcolors.Yellow, Bcolors.Endc))
    else:
        print('%s- Updating Engine Signatures.%s' % (Bcolors.Yellow, Bcolors.Endc))
        download_engine()


def scanner(_scan_path):
    _scanned_file_count = 0
    _infected_file_count = 0
    _scandir_file_count = sum(len(files) for _, _, files in os.walk(_scan_path))
    print('- Scan Directory  : %s' % _scan_path)
    print('- Number of files : %d' % _scandir_file_count)
    print('- Scan Extensions : %s' % str(SCAN_EXTENTIONS)[1:-1])
    print('%s------------------------------------->%s\n' % (Bcolors.Yellow, Bcolors.Endc))
    #print('-%s O.K Here We go.!%s' % (Bcolors.Magenta, Bcolors.Endc))
    print('\x1b[7;33;40m' + 'O.K Here We go.!' + '\x1b[0m')
    print('- Currently scanning...')

    start = time.perf_counter()
    _detected = ''

    _ipaddress = get_ip_address()
    _hostname = get_hostname()
    _scan_id = create_job_id()
    _os_version = get_osver()

    for subdir, dirs, files in os.walk(_scan_path):
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        for file in files:
            #print(os.path.join(subdir, file))
            _scanned_file_count = _scanned_file_count + 1
            _f_file_name = '%s' % os.path.join(subdir, file)
            elapsed_time = time.perf_counter() - start
            #print(file)
            if check_file_extension(file):
                if check_file_size(_f_file_name):
                    scan_file_hash = make_hash(_f_file_name)
                    if hash_exists_in_db(scan_file_hash):
                        _infected_file_count = _infected_file_count + 1
                        _contents = 'datetime="%s",scan_id="%s",os="%s",hostname="%s",ip="%s",file_type="%s",file="%s",created_at="%s",modified_at="%s",hash="%s",code_sign="%s"\n' \
                                    % (datetime.today().strftime('%Y-%m-%d %H:%M:%S'), _scan_id, _os_version, _hostname, _ipaddress, get_file_type(_f_file_name),
                                       _f_file_name, get_create_date(_f_file_name), get_modify_date(_f_file_name), scan_file_hash, extract_digital_signature(file, _f_file_name))
                        _detected += _contents
                        scan_result_logs(_contents)

                    print('- %d files scanned / %d infected [%s] (%s) '
                          % (_scanned_file_count, _infected_file_count,
                             datetime.strftime(datetime.utcfromtimestamp(elapsed_time), '%H:%M:%S'),
                             _f_file_name), end='\r')

    if _infected_file_count >= 1:
        _vt_info = '\n##### For more information about infected file, search the Virustotal ###\n' \
                   'https://www.virustotal.com/gui/file/$infected_file_hash\n\n'
        scan_result_logs(_vt_info)

    print('\n')
    print('- Result')

    if _detected:
        print('%s------O------M------G--------------->%s' % (Bcolors.Red, Bcolors.Endc))
        print('- Scanner Found %s%d%s infected files!' % (Bcolors.Yellow, _infected_file_count, Bcolors.Endc))
        print('- See the %s%s%s \n' % (Bcolors.Cyan, _scan_result_logs_, Bcolors.Endc))
    else:
        print('%s- OK.Good. No infection found.%s' % (Bcolors.Green, Bcolors.Endc))


def main():
    print('\n')
    print('%s▌║█║▌│║▌│║▌║▌█║ %sSimple Basic Malware Scanner %sv%s%s ▌│║▌║▌│║║▌█║▌║█%s\n'
          % (Bcolors.Green, Bcolors.Red, Bcolors.White, __version__, Bcolors.Green, Bcolors.Endc))
    opt = argparse.ArgumentParser(description='Simple Basic Malware Scanner')
    opt.add_argument('--path', help='ex) /var/www/html/upload')
    opt.add_argument('--update', action='store_true', help='AV Engine Update')

    if len(sys.argv) < 1:
        opt.print_help()
        sys.exit(1)
    else:
        options = opt.parse_args()

        if options.path:
            _scan_path = os.path.abspath(options.path)
            print('- Run time: %s' % _ctime_)
            print('- For questions contact github.com/password123456\t\t')
            print('%s------------------------------------->%s\n' % (Bcolors.Green, Bcolors.Endc))
            check_engine()
            print('- Engine Updated  : %s' % get_engine_last_udated_date(_engine_extract_file_))
            engine_count = raw_count(_engine_extract_file_)
            print('- AV Signatures   : %s' % engine_count)
            scanner(_scan_path)

        elif options.update:
            print('- Run time: %s' % _ctime_)
            print('- For questions contact github.com/password123456\t\t')
            print('%s——————————————————>%s\n' % (Bcolors.Green, Bcolors.Endc))
            check_engine()
            print('- Engine Updated  : %s' % get_engine_last_udated_date(_engine_extract_file_))
            engine_count = raw_count(_engine_extract_file_)
            print('- AV Signatures   : %s' % engine_count)
        else:
            opt.print_help()
            sys.exit(1)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(0)
    except Exception as e:
        print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, __name__.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
